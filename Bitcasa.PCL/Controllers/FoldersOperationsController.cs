/*
 * Bitcasa.PCL
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 07/19/2016
 */
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Bitcasa.PCL;
using Bitcasa.PCL.Http.Request;
using Bitcasa.PCL.Http.Response;
using Bitcasa.PCL.Http.Client;
using Bitcasa.PCL.Models;

namespace Bitcasa.PCL.Controllers
{
    public partial class FoldersOperationsController: BaseController
    {
        #region Singleton Pattern

        //private static variables for the singleton pattern
        private static object syncObject = new object();
        private static FoldersOperationsController instance = null;

        /// <summary>
        /// Singleton pattern implementation
        /// </summary>
        internal static FoldersOperationsController Instance
        {
            get
            {
                lock (syncObject)
                {
                    if (null == instance)
                    {
                        instance = new FoldersOperationsController();
                    }
                }
                return instance;
            }
        }

        #endregion Singleton Pattern

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="path">Required parameter: Example: </param>
        /// <param name="name">Required parameter: Example: </param>
        /// <param name="exists">Optional parameter: Example: </param>
        /// <return>Returns the CreateFolderResponse response from the API call</return>
        public CreateFolderResponse CreateFolder(string path, string name, ExistsEnum? exists = null)
        {
            Task<CreateFolderResponse> t = CreateFolderAsync(path, name, exists);
            Task.WaitAll(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="path">Required parameter: Example: </param>
        /// <param name="name">Required parameter: Example: </param>
        /// <param name="exists">Optional parameter: Example: </param>
        /// <return>Returns the CreateFolderResponse response from the API call</return>
        public async Task<CreateFolderResponse> CreateFolderAsync(string path, string name, ExistsEnum? exists = null)
        {
            //the base uri for api requestss
            string _baseUri = string.Format(Configuration.BaseUri, Configuration.AccountId);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/v2/folders/{path}?operation=create");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "path", path }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };
            _headers.Add("Authorization", string.Format("Bearer {0}", Configuration.OAuthAccessToken));

            //append form/field parameters
            var _fields = new Dictionary<string,object>()
            {
                { "name", name },
                { "exists", (exists.HasValue) ? ExistsEnumHelper.ToValue(exists.Value) : null }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<CreateFolderResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="path">Required parameter: Example: </param>
        /// <param name="to">Required parameter: Example: </param>
        /// <param name="name">Required parameter: Example: </param>
        /// <param name="exists">Optional parameter: Example: </param>
        /// <return>Returns the ListSingleFileVersionResponse response from the API call</return>
        public ListSingleFileVersionResponse CreateCopyFolder(
                string path,
                string to,
                string name,
                ExistsEnum? exists = null)
        {
            Task<ListSingleFileVersionResponse> t = CreateCopyFolderAsync(path, to, name, exists);
            Task.WaitAll(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="path">Required parameter: Example: </param>
        /// <param name="to">Required parameter: Example: </param>
        /// <param name="name">Required parameter: Example: </param>
        /// <param name="exists">Optional parameter: Example: </param>
        /// <return>Returns the ListSingleFileVersionResponse response from the API call</return>
        public async Task<ListSingleFileVersionResponse> CreateCopyFolderAsync(
                string path,
                string to,
                string name,
                ExistsEnum? exists = null)
        {
            //the base uri for api requestss
            string _baseUri = string.Format(Configuration.BaseUri, Configuration.AccountId);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/v2/folders/{path}?operation=copy");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "path", path }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };
            _headers.Add("Authorization", string.Format("Bearer {0}", Configuration.OAuthAccessToken));

            //append form/field parameters
            var _fields = new Dictionary<string,object>()
            {
                { "to", to },
                { "name", name },
                { "exists", (exists.HasValue) ? ExistsEnumHelper.ToValue(exists.Value) : null }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<ListSingleFileVersionResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="path">Required parameter: Example: </param>
        /// <param name="to">Required parameter: Example: </param>
        /// <param name="name">Required parameter: Example: </param>
        /// <param name="exists">Optional parameter: Example: </param>
        /// <return>Returns the ListSingleFileVersionResponse response from the API call</return>
        public ListSingleFileVersionResponse CreateMoveFolder(
                string path,
                string to,
                string name,
                ExistsEnum? exists = null)
        {
            Task<ListSingleFileVersionResponse> t = CreateMoveFolderAsync(path, to, name, exists);
            Task.WaitAll(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="path">Required parameter: Example: </param>
        /// <param name="to">Required parameter: Example: </param>
        /// <param name="name">Required parameter: Example: </param>
        /// <param name="exists">Optional parameter: Example: </param>
        /// <return>Returns the ListSingleFileVersionResponse response from the API call</return>
        public async Task<ListSingleFileVersionResponse> CreateMoveFolderAsync(
                string path,
                string to,
                string name,
                ExistsEnum? exists = null)
        {
            //the base uri for api requestss
            string _baseUri = string.Format(Configuration.BaseUri, Configuration.AccountId);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/v2/folders/{path}?operation=move");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "path", path }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };
            _headers.Add("Authorization", string.Format("Bearer {0}", Configuration.OAuthAccessToken));

            //append form/field parameters
            var _fields = new Dictionary<string,object>()
            {
                { "to", to },
                { "name", name },
                { "exists", (exists.HasValue) ? ExistsEnumHelper.ToValue(exists.Value) : null }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<ListSingleFileVersionResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="path">Required parameter: Example: </param>
        /// <return>Returns the ListSingleFileVersionResponse response from the API call</return>
        public ListSingleFileVersionResponse GetFolderMeta(string path)
        {
            Task<ListSingleFileVersionResponse> t = GetFolderMetaAsync(path);
            Task.WaitAll(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="path">Required parameter: Example: </param>
        /// <return>Returns the ListSingleFileVersionResponse response from the API call</return>
        public async Task<ListSingleFileVersionResponse> GetFolderMetaAsync(string path)
        {
            //the base uri for api requestss
            string _baseUri = string.Format(Configuration.BaseUri, Configuration.AccountId);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/v2/folders/{path}/meta");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "path", path }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };
            _headers.Add("Authorization", string.Format("Bearer {0}", Configuration.OAuthAccessToken));

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<ListSingleFileVersionResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="operation">Required parameter: Example: </param>
        /// <param name="name">Required parameter: Example: </param>
        /// <param name="version">Required parameter: Example: </param>
        /// <param name="versionConflict">Required parameter: Example: </param>
        /// <param name="path">Optional parameter: Example: </param>
        /// <param name="dateCreated">Optional parameter: Example: </param>
        /// <param name="dateMetaLastModified">Optional parameter: Example: </param>
        /// <param name="dateContentLastModified">Optional parameter: Example: </param>
        /// <param name="applicationData">Optional parameter: Example: </param>
        /// <return>Returns the ListSingleFileVersionResponse response from the API call</return>
        public ListSingleFileVersionResponse AlterFolderMeta(
                string operation,
                string name,
                int version,
                string versionConflict,
                string path = null,
                DateTime? dateCreated = null,
                DateTime? dateMetaLastModified = null,
                DateTime? dateContentLastModified = null,
                object applicationData = null)
        {
            Task<ListSingleFileVersionResponse> t = AlterFolderMetaAsync(operation, name, version, versionConflict, path, dateCreated, dateMetaLastModified, dateContentLastModified, applicationData);
            Task.WaitAll(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="operation">Required parameter: Example: </param>
        /// <param name="name">Required parameter: Example: </param>
        /// <param name="version">Required parameter: Example: </param>
        /// <param name="versionConflict">Required parameter: Example: </param>
        /// <param name="path">Optional parameter: Example: </param>
        /// <param name="dateCreated">Optional parameter: Example: </param>
        /// <param name="dateMetaLastModified">Optional parameter: Example: </param>
        /// <param name="dateContentLastModified">Optional parameter: Example: </param>
        /// <param name="applicationData">Optional parameter: Example: </param>
        /// <return>Returns the ListSingleFileVersionResponse response from the API call</return>
        public async Task<ListSingleFileVersionResponse> AlterFolderMetaAsync(
                string operation,
                string name,
                int version,
                string versionConflict,
                string path = null,
                DateTime? dateCreated = null,
                DateTime? dateMetaLastModified = null,
                DateTime? dateContentLastModified = null,
                object applicationData = null)
        {
            //the base uri for api requestss
            string _baseUri = string.Format(Configuration.BaseUri, Configuration.AccountId);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/v2/folders/{path}/meta");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "operation", operation },
                { "path", path }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };
            _headers.Add("Authorization", string.Format("Bearer {0}", Configuration.OAuthAccessToken));

            //append form/field parameters
            var _fields = new Dictionary<string,object>()
            {
                { "name", name },
                { "version", version },
                { "version-conflict", versionConflict },
                { "date_created", dateCreated },
                { "date_meta_last_modified", dateMetaLastModified },
                { "date_content_last_modified", dateContentLastModified }
            };
            _fields.Add(APIHelper.PrepareFormFieldsFromObject("application_data", applicationData));

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<ListSingleFileVersionResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="path">Required parameter: Example: </param>
        /// <param name="commit">Optional parameter: Example: </param>
        /// <param name="force">Optional parameter: Example: </param>
        /// <return>Returns the DeleteFileResponse response from the API call</return>
        public DeleteFileResponse DeleteFolder(string path, string commit = null, string force = null)
        {
            Task<DeleteFileResponse> t = DeleteFolderAsync(path, commit, force);
            Task.WaitAll(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="path">Required parameter: Example: </param>
        /// <param name="commit">Optional parameter: Example: </param>
        /// <param name="force">Optional parameter: Example: </param>
        /// <return>Returns the DeleteFileResponse response from the API call</return>
        public async Task<DeleteFileResponse> DeleteFolderAsync(string path, string commit = null, string force = null)
        {
            //the base uri for api requestss
            string _baseUri = string.Format(Configuration.BaseUri, Configuration.AccountId);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/v2/folders/{path}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "path", path }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "commit", commit },
                { "force", force }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };
            _headers.Add("Authorization", string.Format("Bearer {0}", Configuration.OAuthAccessToken));

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Delete(_queryUrl, _headers, null);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<DeleteFileResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="path">Optional parameter: Example: </param>
        /// <param name="depth">Optional parameter: Example: </param>
        /// <param name="filter">Optional parameter: Example: </param>
        /// <param name="strictTraverse">Optional parameter: Example: </param>
        /// <return>Returns the ListFolderResponse response from the API call</return>
        public ListFolderResponse ListFolder(
                string path = null,
                string depth = null,
                string filter = null,
                string strictTraverse = null)
        {
            Task<ListFolderResponse> t = ListFolderAsync(path, depth, filter, strictTraverse);
            Task.WaitAll(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="path">Optional parameter: Example: </param>
        /// <param name="depth">Optional parameter: Example: </param>
        /// <param name="filter">Optional parameter: Example: </param>
        /// <param name="strictTraverse">Optional parameter: Example: </param>
        /// <return>Returns the ListFolderResponse response from the API call</return>
        public async Task<ListFolderResponse> ListFolderAsync(
                string path = null,
                string depth = null,
                string filter = null,
                string strictTraverse = null)
        {
            //the base uri for api requestss
            string _baseUri = string.Format(Configuration.BaseUri, Configuration.AccountId);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/v2/folders/{path}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "path", path }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "depth", depth },
                { "filter", filter },
                { "strict-traverse", strictTraverse }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };
            _headers.Add("Authorization", string.Format("Bearer {0}", Configuration.OAuthAccessToken));

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<ListFolderResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

    }
} 