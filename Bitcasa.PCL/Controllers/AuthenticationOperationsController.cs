/*
 * Bitcasa.PCL
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 07/19/2016
 */
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Bitcasa.PCL;
using Bitcasa.PCL.Http.Request;
using Bitcasa.PCL.Http.Response;
using Bitcasa.PCL.Http.Client;
using Bitcasa.PCL.Models;

namespace Bitcasa.PCL.Controllers
{
    public partial class AuthenticationOperationsController: BaseController
    {
        #region Singleton Pattern

        //private static variables for the singleton pattern
        private static object syncObject = new object();
        private static AuthenticationOperationsController instance = null;

        /// <summary>
        /// Singleton pattern implementation
        /// </summary>
        internal static AuthenticationOperationsController Instance
        {
            get
            {
                lock (syncObject)
                {
                    if (null == instance)
                    {
                        instance = new AuthenticationOperationsController();
                    }
                }
                return instance;
            }
        }

        #endregion Singleton Pattern

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="authorization">Required parameter: BCS :</param>
        /// <param name="date">Required parameter: Example: </param>
        /// <param name="username">Required parameter: Example: </param>
        /// <param name="password">Required parameter: Example: </param>
        /// <return>Returns the AuthenticationResponse response from the API call</return>
        public AuthenticationResponse CreateOAuth2PasswordCredentialsGrant(
                string authorization,
                DateTime date,
                string username,
                string password)
        {
            Task<AuthenticationResponse> t = CreateOAuth2PasswordCredentialsGrantAsync(authorization, date, username, password);
            Task.WaitAll(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="authorization">Required parameter: BCS :</param>
        /// <param name="date">Required parameter: Example: </param>
        /// <param name="username">Required parameter: Example: </param>
        /// <param name="password">Required parameter: Example: </param>
        /// <return>Returns the AuthenticationResponse response from the API call</return>
        public async Task<AuthenticationResponse> CreateOAuth2PasswordCredentialsGrantAsync(
                string authorization,
                DateTime date,
                string username,
                string password)
        {
            //the base uri for api requestss
            string _baseUri = string.Format(Configuration.BaseUri, Configuration.AccountId);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/v2/oauth2/token");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "Authorization", authorization },
                { "Content-Type", "application/x-www-form-urlencoded; charset=utf8" },
                { "Date", date }
            };

            //append form/field parameters
            var _fields = new Dictionary<string,object>()
            {
                { "grant_type", "password" },
                { "username", username },
                { "password", password }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<AuthenticationResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="authorization">Required parameter: Bearer</param>
        /// <return>Returns the void response from the API call</return>
        public void GetPing(string authorization)
        {
            Task t = GetPingAsync(authorization);
            Task.WaitAll(t);
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="authorization">Required parameter: Bearer</param>
        /// <return>Returns the void response from the API call</return>
        public async Task GetPingAsync(string authorization)
        {
            //the base uri for api requestss
            string _baseUri = string.Format(Configuration.BaseUri, Configuration.AccountId);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/v2/ping HTTP/1.1");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "Authorization", authorization },
                { "Content-Type", "application/x-www-form-urlencoded; charset=utf8" }
            };
            _headers.Add("Authorization", string.Format("Bearer {0}", Configuration.OAuthAccessToken));

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

    }
} 