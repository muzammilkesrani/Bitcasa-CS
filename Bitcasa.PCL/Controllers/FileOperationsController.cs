/*
 * Bitcasa.PCL
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 07/19/2016
 */
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Bitcasa.PCL;
using Bitcasa.PCL.Http.Request;
using Bitcasa.PCL.Http.Response;
using Bitcasa.PCL.Http.Client;
using Bitcasa.PCL.Models;

namespace Bitcasa.PCL.Controllers
{
    public partial class FileOperationsController: BaseController
    {
        #region Singleton Pattern

        //private static variables for the singleton pattern
        private static object syncObject = new object();
        private static FileOperationsController instance = null;

        /// <summary>
        /// Singleton pattern implementation
        /// </summary>
        internal static FileOperationsController Instance
        {
            get
            {
                lock (syncObject)
                {
                    if (null == instance)
                    {
                        instance = new FileOperationsController();
                    }
                }
                return instance;
            }
        }

        #endregion Singleton Pattern

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="path">Required parameter: Base64-encoded path to any location in the authenticated user�s account.</param>
        /// <param name="range">Optional parameter: Example: </param>
        /// <param name="version">Optional parameter: Example: </param>
        /// <param name="versionConflict">Optional parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public void GetDownloadFile(
                string path,
                string range = null,
                int? version = null,
                string versionConflict = null)
        {
            Task t = GetDownloadFileAsync(path, range, version, versionConflict);
            Task.WaitAll(t);
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="path">Required parameter: Base64-encoded path to any location in the authenticated user�s account.</param>
        /// <param name="range">Optional parameter: Example: </param>
        /// <param name="version">Optional parameter: Example: </param>
        /// <param name="versionConflict">Optional parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public async Task GetDownloadFileAsync(
                string path,
                string range = null,
                int? version = null,
                string versionConflict = null)
        {
            //the base uri for api requestss
            string _baseUri = string.Format(Configuration.BaseUri, Configuration.AccountId);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/v2/files/{path}/");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "path", path }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "version", version },
                { "version-conflict", versionConflict }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "Range", range }
            };
            _headers.Add("Authorization", string.Format("Bearer {0}", Configuration.OAuthAccessToken));

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
                throw new APIException(@"Version was not supplied, or version was not the current version.", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="path">Required parameter: Example: </param>
        /// <param name="to">Required parameter: Example: </param>
        /// <param name="name">Required parameter: Example: </param>
        /// <param name="exists">Optional parameter: Example: rename</param>
        /// <return>Returns the CopyAndMoveFileResponse response from the API call</return>
        public CopyAndMoveFileResponse CreateCopyFile(
                string path,
                string to,
                string name,
                ExistsEnum? exists = ExistsEnum.RENAME)
        {
            Task<CopyAndMoveFileResponse> t = CreateCopyFileAsync(path, to, name, exists);
            Task.WaitAll(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="path">Required parameter: Example: </param>
        /// <param name="to">Required parameter: Example: </param>
        /// <param name="name">Required parameter: Example: </param>
        /// <param name="exists">Optional parameter: Example: rename</param>
        /// <return>Returns the CopyAndMoveFileResponse response from the API call</return>
        public async Task<CopyAndMoveFileResponse> CreateCopyFileAsync(
                string path,
                string to,
                string name,
                ExistsEnum? exists = ExistsEnum.RENAME)
        {
            //the base uri for api requestss
            string _baseUri = string.Format(Configuration.BaseUri, Configuration.AccountId);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/v2/files/{path}?operation=copy");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "path", path }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };
            _headers.Add("Authorization", string.Format("Bearer {0}", Configuration.OAuthAccessToken));

            //append form/field parameters
            var _fields = new Dictionary<string,object>()
            {
                { "to", to },
                { "name", name },
                { "exists", (exists.HasValue) ? ExistsEnumHelper.ToValue(exists.Value) : "rename" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<CopyAndMoveFileResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="path">Required parameter: Example: </param>
        /// <param name="to">Required parameter: Example: </param>
        /// <param name="name">Optional parameter: Example: </param>
        /// <param name="exists">Optional parameter: Example: </param>
        /// <return>Returns the CopyAndMoveFileResponse response from the API call</return>
        public CopyAndMoveFileResponse CreateMoveFile(
                string path,
                string to,
                string name = null,
                ExistsEnum? exists = null)
        {
            Task<CopyAndMoveFileResponse> t = CreateMoveFileAsync(path, to, name, exists);
            Task.WaitAll(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="path">Required parameter: Example: </param>
        /// <param name="to">Required parameter: Example: </param>
        /// <param name="name">Optional parameter: Example: </param>
        /// <param name="exists">Optional parameter: Example: </param>
        /// <return>Returns the CopyAndMoveFileResponse response from the API call</return>
        public async Task<CopyAndMoveFileResponse> CreateMoveFileAsync(
                string path,
                string to,
                string name = null,
                ExistsEnum? exists = null)
        {
            //the base uri for api requestss
            string _baseUri = string.Format(Configuration.BaseUri, Configuration.AccountId);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/v2/files/{path}?operation=move");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "path", path }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };
            _headers.Add("Authorization", string.Format("Bearer {0}", Configuration.OAuthAccessToken));

            //append form/field parameters
            var _fields = new Dictionary<string,object>()
            {
                { "to", to },
                { "name", name },
                { "exists", (exists.HasValue) ? ExistsEnumHelper.ToValue(exists.Value) : null }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<CopyAndMoveFileResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="path">Required parameter: Example: </param>
        /// <param name="commit">Optional parameter: Example: false</param>
        /// <return>Returns the DeleteFileResponse response from the API call</return>
        public DeleteFileResponse DeleteFile(string path, string commit = "false")
        {
            Task<DeleteFileResponse> t = DeleteFileAsync(path, commit);
            Task.WaitAll(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="path">Required parameter: Example: </param>
        /// <param name="commit">Optional parameter: Example: false</param>
        /// <return>Returns the DeleteFileResponse response from the API call</return>
        public async Task<DeleteFileResponse> DeleteFileAsync(string path, string commit = "false")
        {
            //the base uri for api requestss
            string _baseUri = string.Format(Configuration.BaseUri, Configuration.AccountId);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/v2/files/{path}/");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "path", path }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "commit", (null != commit) ? commit : "false" }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };
            _headers.Add("Authorization", string.Format("Bearer {0}", Configuration.OAuthAccessToken));

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Delete(_queryUrl, _headers, null);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<DeleteFileResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="path">Required parameter: Example: </param>
        /// <param name="startVersion">Optional parameter: Example: </param>
        /// <param name="stopVersion">Optional parameter: Example: </param>
        /// <param name="limit">Optional parameter: Example: </param>
        /// <return>Returns the ListFileVersionsResponse response from the API call</return>
        public ListFileVersionsResponse ListFileVersions(
                string path,
                int? startVersion = null,
                int? stopVersion = null,
                int? limit = null)
        {
            Task<ListFileVersionsResponse> t = ListFileVersionsAsync(path, startVersion, stopVersion, limit);
            Task.WaitAll(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="path">Required parameter: Example: </param>
        /// <param name="startVersion">Optional parameter: Example: </param>
        /// <param name="stopVersion">Optional parameter: Example: </param>
        /// <param name="limit">Optional parameter: Example: </param>
        /// <return>Returns the ListFileVersionsResponse response from the API call</return>
        public async Task<ListFileVersionsResponse> ListFileVersionsAsync(
                string path,
                int? startVersion = null,
                int? stopVersion = null,
                int? limit = null)
        {
            //the base uri for api requestss
            string _baseUri = string.Format(Configuration.BaseUri, Configuration.AccountId);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/v2/files/{path}/versions");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "path", path }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "start-version", startVersion },
                { "stop-version", stopVersion },
                { "limit", limit }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };
            _headers.Add("Authorization", string.Format("Bearer {0}", Configuration.OAuthAccessToken));

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<ListFileVersionsResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="path">Required parameter: Example: </param>
        /// <param name="version">Required parameter: Example: </param>
        /// <return>Returns the ListSingleFileVersionResponse response from the API call</return>
        public ListSingleFileVersionResponse ListSingleFileVersion(string path, int version)
        {
            Task<ListSingleFileVersionResponse> t = ListSingleFileVersionAsync(path, version);
            Task.WaitAll(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="path">Required parameter: Example: </param>
        /// <param name="version">Required parameter: Example: </param>
        /// <return>Returns the ListSingleFileVersionResponse response from the API call</return>
        public async Task<ListSingleFileVersionResponse> ListSingleFileVersionAsync(string path, int version)
        {
            //the base uri for api requestss
            string _baseUri = string.Format(Configuration.BaseUri, Configuration.AccountId);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/v2/files/{path}/versions/{version}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "path", path },
                { "version", version }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };
            _headers.Add("Authorization", string.Format("Bearer {0}", Configuration.OAuthAccessToken));

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<ListSingleFileVersionResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="path">Required parameter: Example: </param>
        /// <return>Returns the ListSingleFileVersionResponse response from the API call</return>
        public ListSingleFileVersionResponse GetFileMeta(string path)
        {
            Task<ListSingleFileVersionResponse> t = GetFileMetaAsync(path);
            Task.WaitAll(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="path">Required parameter: Example: </param>
        /// <return>Returns the ListSingleFileVersionResponse response from the API call</return>
        public async Task<ListSingleFileVersionResponse> GetFileMetaAsync(string path)
        {
            //the base uri for api requestss
            string _baseUri = string.Format(Configuration.BaseUri, Configuration.AccountId);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/v2/files/{path}/meta");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "path", path }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };
            _headers.Add("Authorization", string.Format("Bearer {0}", Configuration.OAuthAccessToken));

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<ListSingleFileVersionResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="path">Required parameter: Example: </param>
        /// <param name="name">Optional parameter: Example: </param>
        /// <param name="extension">Optional parameter: Example: </param>
        /// <param name="dateCreated">Optional parameter: Example: </param>
        /// <param name="dateMetaLastModified">Optional parameter: Example: </param>
        /// <param name="dateContentLastModified">Optional parameter: Example: </param>
        /// <param name="mime">Optional parameter: Example: </param>
        /// <param name="applicationData">Optional parameter: Example: </param>
        /// <param name="version">Optional parameter: Example: </param>
        /// <param name="versionConflict">Optional parameter: Example: </param>
        /// <return>Returns the ListSingleFileVersionResponse response from the API call</return>
        public ListSingleFileVersionResponse CreateAfterFileMeta(
                string path,
                string name = null,
                string extension = null,
                DateTime? dateCreated = null,
                DateTime? dateMetaLastModified = null,
                DateTime? dateContentLastModified = null,
                string mime = null,
                object applicationData = null,
                int? version = null,
                string versionConflict = null)
        {
            Task<ListSingleFileVersionResponse> t = CreateAfterFileMetaAsync(path, name, extension, dateCreated, dateMetaLastModified, dateContentLastModified, mime, applicationData, version, versionConflict);
            Task.WaitAll(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="path">Required parameter: Example: </param>
        /// <param name="name">Optional parameter: Example: </param>
        /// <param name="extension">Optional parameter: Example: </param>
        /// <param name="dateCreated">Optional parameter: Example: </param>
        /// <param name="dateMetaLastModified">Optional parameter: Example: </param>
        /// <param name="dateContentLastModified">Optional parameter: Example: </param>
        /// <param name="mime">Optional parameter: Example: </param>
        /// <param name="applicationData">Optional parameter: Example: </param>
        /// <param name="version">Optional parameter: Example: </param>
        /// <param name="versionConflict">Optional parameter: Example: </param>
        /// <return>Returns the ListSingleFileVersionResponse response from the API call</return>
        public async Task<ListSingleFileVersionResponse> CreateAfterFileMetaAsync(
                string path,
                string name = null,
                string extension = null,
                DateTime? dateCreated = null,
                DateTime? dateMetaLastModified = null,
                DateTime? dateContentLastModified = null,
                string mime = null,
                object applicationData = null,
                int? version = null,
                string versionConflict = null)
        {
            //the base uri for api requestss
            string _baseUri = string.Format(Configuration.BaseUri, Configuration.AccountId);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/v2/files/{path}/meta");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "path", path }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };
            _headers.Add("Authorization", string.Format("Bearer {0}", Configuration.OAuthAccessToken));

            //append form/field parameters
            var _fields = new Dictionary<string,object>()
            {
                { "name", name },
                { "extension", extension },
                { "date_created", dateCreated },
                { "date_meta_last_modified", dateMetaLastModified },
                { "date_content_last_modified", dateContentLastModified },
                { "mime", mime },
                { "version", version },
                { "version-conflict", versionConflict }
            };
            _fields.Add(APIHelper.PrepareFormFieldsFromObject("application_data", applicationData));

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<ListSingleFileVersionResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="path">Required parameter: Example: </param>
        /// <param name="version">Required parameter: Example: </param>
        /// <return>Returns the ListSingleFileVersionResponse response from the API call</return>
        public ListSingleFileVersionResponse CreatePromoteFileVersion(string path, int version)
        {
            Task<ListSingleFileVersionResponse> t = CreatePromoteFileVersionAsync(path, version);
            Task.WaitAll(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="path">Required parameter: Example: </param>
        /// <param name="version">Required parameter: Example: </param>
        /// <return>Returns the ListSingleFileVersionResponse response from the API call</return>
        public async Task<ListSingleFileVersionResponse> CreatePromoteFileVersionAsync(string path, int version)
        {
            //the base uri for api requestss
            string _baseUri = string.Format(Configuration.BaseUri, Configuration.AccountId);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/v2/files/{path}/versions/{version}?operation=promote");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "path", path },
                { "version", version }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };
            _headers.Add("Authorization", string.Format("Bearer {0}", Configuration.OAuthAccessToken));

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, null);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<ListSingleFileVersionResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

    }
} 