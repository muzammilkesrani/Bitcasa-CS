/*
 * Bitcasa.PCL
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 07/19/2016
 */
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Bitcasa.PCL;
using Bitcasa.PCL.Http.Request;
using Bitcasa.PCL.Http.Response;
using Bitcasa.PCL.Http.Client;
using Bitcasa.PCL.Models;

namespace Bitcasa.PCL.Controllers
{
    public partial class ShareOperationsController: BaseController
    {
        #region Singleton Pattern

        //private static variables for the singleton pattern
        private static object syncObject = new object();
        private static ShareOperationsController instance = null;

        /// <summary>
        /// Singleton pattern implementation
        /// </summary>
        internal static ShareOperationsController Instance
        {
            get
            {
                lock (syncObject)
                {
                    if (null == instance)
                    {
                        instance = new ShareOperationsController();
                    }
                }
                return instance;
            }
        }

        #endregion Singleton Pattern

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="path">Required parameter: Example: </param>
        /// <return>Returns the CreateAndAlterShareResponse response from the API call</return>
        public CreateAndAlterShareResponse CreateShare(string path)
        {
            Task<CreateAndAlterShareResponse> t = CreateShareAsync(path);
            Task.WaitAll(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="path">Required parameter: Example: </param>
        /// <return>Returns the CreateAndAlterShareResponse response from the API call</return>
        public async Task<CreateAndAlterShareResponse> CreateShareAsync(string path)
        {
            //the base uri for api requestss
            string _baseUri = string.Format(Configuration.BaseUri, Configuration.AccountId);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/v2/shares/");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };
            _headers.Add("Authorization", string.Format("Bearer {0}", Configuration.OAuthAccessToken));

            //append form/field parameters
            var _fields = new Dictionary<string,object>()
            {
                { "path", path }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<CreateAndAlterShareResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="shareKey">Required parameter: Example: </param>
        /// <param name="path">Optional parameter: Example: </param>
        /// <return>Returns the BrowseShareResponse response from the API call</return>
        public BrowseShareResponse GetBrowseShare(string shareKey, string path = null)
        {
            Task<BrowseShareResponse> t = GetBrowseShareAsync(shareKey, path);
            Task.WaitAll(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="shareKey">Required parameter: Example: </param>
        /// <param name="path">Optional parameter: Example: </param>
        /// <return>Returns the BrowseShareResponse response from the API call</return>
        public async Task<BrowseShareResponse> GetBrowseShareAsync(string shareKey, string path = null)
        {
            //the base uri for api requestss
            string _baseUri = string.Format(Configuration.BaseUri, Configuration.AccountId);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/v2/shares/{share_key}/{path}/meta");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "share_key", shareKey },
                { "path", path }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };
            _headers.Add("Authorization", string.Format("Bearer {0}", Configuration.OAuthAccessToken));

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<BrowseShareResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="shareKey">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public void DeleteShare(string shareKey)
        {
            Task t = DeleteShareAsync(shareKey);
            Task.WaitAll(t);
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="shareKey">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public async Task DeleteShareAsync(string shareKey)
        {
            //the base uri for api requestss
            string _baseUri = string.Format(Configuration.BaseUri, Configuration.AccountId);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/v2/shares/{share_key}/");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "share_key", shareKey }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };
            _headers.Add("Authorization", string.Format("Bearer {0}", Configuration.OAuthAccessToken));

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Delete(_queryUrl, _headers, null);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <return>Returns the ListShareResponse response from the API call</return>
        public ListShareResponse ListShares()
        {
            Task<ListShareResponse> t = ListSharesAsync();
            Task.WaitAll(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <return>Returns the ListShareResponse response from the API call</return>
        public async Task<ListShareResponse> ListSharesAsync()
        {
            //the base uri for api requestss
            string _baseUri = string.Format(Configuration.BaseUri, Configuration.AccountId);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/v2/shares/");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };
            _headers.Add("Authorization", string.Format("Bearer {0}", Configuration.OAuthAccessToken));

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<ListShareResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="shareKey">Required parameter: Example: </param>
        /// <param name="path">Optional parameter: Example: </param>
        /// <param name="exists">Optional parameter: Example: </param>
        /// <return>Returns the ReceiveAndUnlockShareResponse response from the API call</return>
        public ReceiveAndUnlockShareResponse CreateReceiveShare(string shareKey, string path = null, ExistsEnum? exists = null)
        {
            Task<ReceiveAndUnlockShareResponse> t = CreateReceiveShareAsync(shareKey, path, exists);
            Task.WaitAll(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="shareKey">Required parameter: Example: </param>
        /// <param name="path">Optional parameter: Example: </param>
        /// <param name="exists">Optional parameter: Example: </param>
        /// <return>Returns the ReceiveAndUnlockShareResponse response from the API call</return>
        public async Task<ReceiveAndUnlockShareResponse> CreateReceiveShareAsync(string shareKey, string path = null, ExistsEnum? exists = null)
        {
            //the base uri for api requestss
            string _baseUri = string.Format(Configuration.BaseUri, Configuration.AccountId);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/v2/shares/{share_key}/");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "share_key", shareKey }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };
            _headers.Add("Authorization", string.Format("Bearer {0}", Configuration.OAuthAccessToken));

            //append form/field parameters
            var _fields = new Dictionary<string,object>()
            {
                { "path", path },
                { "exists", (exists.HasValue) ? ExistsEnumHelper.ToValue(exists.Value) : null }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<ReceiveAndUnlockShareResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="shareKey">Required parameter: Example: </param>
        /// <param name="password">Required parameter: Example: </param>
        /// <return>Returns the ReceiveAndUnlockShareResponse response from the API call</return>
        public ReceiveAndUnlockShareResponse CreateUnlockShare(string shareKey, string password)
        {
            Task<ReceiveAndUnlockShareResponse> t = CreateUnlockShareAsync(shareKey, password);
            Task.WaitAll(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="shareKey">Required parameter: Example: </param>
        /// <param name="password">Required parameter: Example: </param>
        /// <return>Returns the ReceiveAndUnlockShareResponse response from the API call</return>
        public async Task<ReceiveAndUnlockShareResponse> CreateUnlockShareAsync(string shareKey, string password)
        {
            //the base uri for api requestss
            string _baseUri = string.Format(Configuration.BaseUri, Configuration.AccountId);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/v2/shares/{share_key}/unlock");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "share_key", shareKey }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };
            _headers.Add("Authorization", string.Format("Bearer {0}", Configuration.OAuthAccessToken));

            //append form/field parameters
            var _fields = new Dictionary<string,object>()
            {
                { "password", password }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<ReceiveAndUnlockShareResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="shareKey">Required parameter: Example: </param>
        /// <param name="currentPassword">Optional parameter: Example: </param>
        /// <param name="password">Optional parameter: Example: </param>
        /// <param name="name">Optional parameter: Example: </param>
        /// <return>Returns the CreateAndAlterShareResponse response from the API call</return>
        public CreateAndAlterShareResponse AlterShareInfo(
                string shareKey,
                string currentPassword = null,
                string password = null,
                string name = null)
        {
            Task<CreateAndAlterShareResponse> t = AlterShareInfoAsync(shareKey, currentPassword, password, name);
            Task.WaitAll(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="shareKey">Required parameter: Example: </param>
        /// <param name="currentPassword">Optional parameter: Example: </param>
        /// <param name="password">Optional parameter: Example: </param>
        /// <param name="name">Optional parameter: Example: </param>
        /// <return>Returns the CreateAndAlterShareResponse response from the API call</return>
        public async Task<CreateAndAlterShareResponse> AlterShareInfoAsync(
                string shareKey,
                string currentPassword = null,
                string password = null,
                string name = null)
        {
            //the base uri for api requestss
            string _baseUri = string.Format(Configuration.BaseUri, Configuration.AccountId);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/v2/shares/{share_key}/info");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "share_key", shareKey }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };
            _headers.Add("Authorization", string.Format("Bearer {0}", Configuration.OAuthAccessToken));

            //append form/field parameters
            var _fields = new Dictionary<string,object>()
            {
                { "current_password", currentPassword },
                { "password", password },
                { "name", name }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<CreateAndAlterShareResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

    }
} 